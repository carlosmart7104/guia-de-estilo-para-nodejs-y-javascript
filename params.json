{
  "name": "Guia de estilo para Node.js y JavaScript",
  "tagline": "Una guía de estilo para código en node.js/JavaScript.",
  "body": "# Guía de estilo para Node.js\r\n\r\nEsta es una guía para escribir código Node.js coherente y estéticamente agradable.\r\nSe inspira en lo que es popular dentro de la comunidad, y algunas\r\nopiniones personales.\r\n\r\nHay una .jshintrc que hace cumplir estas normas tan estrechamente como sea posible. \r\nPuedes o bien utilizar ese y ajustarlo o utilizar [este script] (https://gist.github.com/kentcdodds/11293570) para hacer tu propia versión.\r\n\r\nEsta guía fue creada por [Félix Geisendörfer] (http://felixge.de/), traducida al español por Carlos J. Martínez Díaz y está\r\nlicenciada bajo la licencia [CC BY-SA 3.0] (http://creativecommons.org/licenses/by-sa/3.0/). \r\nSe le anima a descargar este repositorio y hacer los ajustes necesarios de acuerdo a sus preferencias.\r\n\r\n![Licencia Creative Commons](http://i.creativecommons.org/l/by-sa/3.0/88x31.png)\r\n\r\n## Tabla de contenido\r\n\r\n### Formateo\r\n* [2 Espacios para la sangría](#2-espacios-para-la-sangría)\r\n* [Saltos de línea](#saltos-de-línea)\r\n* [No deje espacios en blanco](#no-deje-espacios-en-blanco)\r\n* [Utilice punto y coma](#utilice-punto-y-coma)\r\n* [80 caracteres por línea](#80-caracteres-por-línea)\r\n* [Use comillas simples](#use-comillas-simples)\r\n* [Las llaves de apertura van en la misma línea](#las-llaves-de-apertura-van-en-la-misma-línea)\r\n* [Declare una variable por sentencia var](#declare-una-variable-por-sentencia-var)\r\n\r\n### Convenciones de nomenclatura\r\n* [Use lowerCamelCase para las variables, propiedades y nombres de funciones](#use-lowercamelcase-para-las-variables-propiedades-y-nombres-de-funciones)\r\n* [Use UpperCamelCase para nombres de clase](#use-uppercamelcase-para-nombres-de-clase)\r\n* [Use MAYÚSCULAS para las constantes](#use-mayúsculas-para-las-constantes)\r\n\r\n### Variables\r\n* [Creación de Objetos / Matrices](#creación-de-objetos--matrices)\r\n\r\n### Condicionales\r\n* [Utilice el operador ===](#utilice-el-operador-)\r\n* [Utilice el operador ternario en multiples líneas](#utilice-el-operador-ternario-en-multiples-líneas)\r\n* [Utilice condiciones descriptivas](#utilice-condiciones-descriptivas)\r\n\r\n### Funciones\r\n* [Escriba funciones pequeñas](#escriba-funciones-pequeñas)\r\n* [Retorne rápidamente las funciones](#retorne-rápidamente-las-funciones)\r\n* [Nombre sus closures](#nombre-sus-closures)\r\n* [No use closures anidados](#no-use-closures-anidados)\r\n* [Concatene los métodos claramente](#concatene-los-métodos-claramente)\r\n\r\n### Comentarios\r\n* [Use diagonales para los comentarios](#use-diagonales-para-los-comentarios)\r\n\r\n### Miscelanea\r\n* [Object.freeze, Object.preventExtensions, Object.seal, with, eval](#objectfreeze-objectpreventextensions-objectseal-with-eval)\r\n* [Requieres al principio](#requieres-al-principio)\r\n* [Getters y setters](#getters-y-setters)\r\n* [No extienda prototypes incorporados](#no-extienda-prototypes-ya-incorporados)\r\n\r\n## Formateo\r\n\r\n### 2 Espacios para la sangría\r\n\r\nUtilice 2 espacios para indentar el código y un jure que nunca mezclará tabs y\r\nespacios, es un tipo especial de infierno que le está esperando de algún modo.\r\n\r\n### Saltos de línea\r\n\r\nUse solo saltos de línea de estilo UNIX, use (`\\ n`), y un carácter de nueva línea como el último carácter de un archivo. \r\nLos saltos de línea de estilo Windows (`\\ r \\ n`) están prohibidos dentro de cualquier repositorio.\r\n\r\n### No deje espacios en blanco\r\n\r\nAl igual que se cepilla los dientes después de cada comida, limpie todo el conjunto de espacios en blanco en los archivos de JS antes de hacer un commit. De lo contrario el olor a podrido de la negligencia y el descuido finalmente le dejará sin colaboradores y/o compañeros de trabajo.\r\n\r\n### Utilice punto y coma\r\n\r\nSegún [scientific research] [hnsemicolons], el uso de punto y coma es un valor fundamental de nuestra comunidad. \r\nTenga en cuenta los puntos de [the opposition][], pero sea un tradicionalista cuando se trata de abusar de los mecanismos de corrección de errores para placeres sintácticos baratos.\r\n\r\n[the opposition]: http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding\r\n[hnsemicolons]: http://news.ycombinator.com/item?id=1547647\r\n\r\n### 80 caracteres por línea\r\n\r\nLimíte sus líneas a 80 caracteres. \r\nSí, las pantallas se han vuelto mucho más grandes en los últimos años, pero su cerebro no tiene la capacidad.\r\nUtilice el espacio adicional para la pantalla dividida, su editor soporta eso, ¿verdad?\r\n\r\n### Use comillas simples\r\n\r\nUse comillas simples, a menos que usted esté escribiendo JSON.\r\n\r\n*Correcto:*\r\n\r\n```js\r\nfoo var = 'bar';\r\n```\r\n\r\n*Incorrecto:*\r\n\r\n```js\r\nfoo var = \"bar\";\r\n```\r\n### Las llaves de apertura van en la misma línea\r\n\r\nSus llaves de apertura van en la misma línea que el enunciado.\r\n\r\n*Correcto:*\r\n\r\n```js\r\nif (true) {\r\n  console.log ('Ganaste!');\r\n}\r\n```\r\n\r\n*Incorrecto:*\r\n\r\n```js\r\nif (true)\r\n{\r\n  console.log ('Perdiste :C');\r\n}\r\n```\r\n\r\nTambién, observe el uso de espacios en blanco antes y después de la declaración de estado.\r\n\r\n### Declare una variable por sentencia var\r\n\r\nDeclare una variable por sentencia var, hace que sea más fácil editar el orden de las líneas. \r\nSin embargo, ignore la [Crockford] [crockfordconvention] cuando se trata de declarar variables más profundas dentro de una función, sólo hay que poner las declaraciones siempre que tenga sentido.\r\n\r\n*Correcto:*\r\n\r\n```js\r\nvar keys   = ['foo', 'bar'];\r\nvar values = [23, 42];\r\n\r\nvar object = {};\r\nwhile (keys.length) {\r\n  var key = keys.pop();\r\n  object[key] = values.pop();\r\n}\r\n```\r\n\r\n*Incorrecto:*\r\n\r\n```js\r\nvar keys = ['foo', 'bar'],\r\n    values = [23, 42],\r\n    object = {},\r\n    key;\r\n\r\nwhile (keys.length) {\r\n  key = keys.pop();\r\n  object[key] = values.pop();\r\n}\r\n```\r\n\r\n[crockfordconvention]: http://javascript.crockford.com/code.html\r\n\r\n### Convenciones de nomenclatura\r\n\r\n### Use lowerCamelCase para las variables, propiedades y nombres de funciones\r\n\r\nLas variables, propiedades y nombres de funciones deben usar `lowerCamelCase`. \r\nEstos también deben ser descriptivos. \r\nLas abreviaturas en variables de carácter individual y poco frecuente generalmente deben ser evitadas.\r\n\r\n*Correcto:*\r\n\r\n```js\r\nvar adminUser = db.query('SELECT * FROM users ...');\r\n```\r\n\r\n*Incorrecto:*\r\n\r\n```js\r\nvar admin_user = db.query('SELECT * FROM users ...');\r\n```\r\n\r\n### Use UpperCamelCase para nombres de clase\r\n\r\nLos nombres de clase deben ser capitalizados usando `UpperCamelCase`.\r\n\r\n*Correcto:*\r\n\r\n```js\r\nfunction BankAccount() {\r\n}\r\n```\r\n\r\n*Incorrecto:*\r\n\r\n```js\r\nfunction bank_Account() {\r\n}\r\n```\r\n\r\n## Use mayúsculas para las constantes\r\n\r\nLas constantes deben ser declaradas como variables regulares o propiedades de clase estáticos, utilizando todas las letras mayúsculas.\r\n\r\n*Correcto:*\r\n\r\n```js\r\nvar SECOND = 1 * 1000;\r\n\r\nfunction File() {\r\n}\r\nFile.FULL_PERMISSIONS = 0777;\r\n```\r\n\r\n*Incorrecto:*\r\n\r\n```js\r\nconst SECOND = 1 * 1000;\r\n\r\nfunction File() {\r\n}\r\nFile.fullPermissions = 0777;\r\n```\r\n\r\n[const]: https://developer.mozilla.org/en/JavaScript/Reference/Statements/const\r\n\r\n## Variables\r\n\r\n### Creación de Objetos / Matrices\r\n\r\nUtilice coma al final y ponga declaraciones *breves* en una sola línea. Sólo entrecomille claves cuando el intérprete lo requiera:\r\n\r\n*Correcto:*\r\n\r\n```js\r\nvar a = ['hello', 'world'];\r\nvar b = {\r\n  good: 'code',\r\n  'is generally': 'pretty',\r\n};\r\n```\r\n\r\n*Incorrecto:*\r\n\r\n```js\r\nvar a = [\r\n  'hello', 'world'\r\n];\r\nvar b = {\"good\": 'code'\r\n        , is generally: 'pretty'\r\n        };\r\n```\r\n\r\n## Condicionales\r\n\r\n### Utilice el operador ===\r\n\r\nLa programación no se trata de recordar [reglas estúpidas] [comparisonoperators]. Use el operador de igualdad triple, ya que funcionará como se espera.\r\n\r\n*Correcto:*\r\n\r\n```js\r\nvar a = 0;\r\nif (a !== '') {\r\n  console.log('winning');\r\n}\r\n\r\n```\r\n\r\n*Incorrecto:*\r\n\r\n```js\r\nvar a = 0;\r\nif (a == '') {\r\n  console.log('losing');\r\n}\r\n```\r\n\r\n[comparisonoperators]: https://developer.mozilla.org/en/JavaScript/Reference/Operators/Comparison_Operators\r\n\r\n### Utilice el operador ternario en multiples líneas\r\n\r\nEl operador ternario no debe utilizarse en una sola línea. \r\nDivídalo en varias líneas.\r\n\r\n*Correcto:*\r\n\r\n```js\r\nvar foo = (a === b)\r\n  ? 1\r\n  : 2;\r\n```\r\n\r\n*Incorrecto:*\r\n\r\n```js\r\nvar foo = (a === b) ? 1 : 2;\r\n```\r\n\r\n### Utilice condiciones descriptivas\r\n\r\nCualquier condición no trivial debe ser asignada a una función o variable con un nombre que la describa:\r\n\r\n*Correcto:*\r\n\r\n```js\r\nvar isValidPassword = password.length >= 4 && /^(?=.*\\d).{4,}$/.test(password);\r\n\r\nif (isValidPassword) {\r\n  console.log('winning');\r\n}\r\n```\r\n\r\n*Incorrecto:*\r\n\r\n```js\r\nif (password.length >= 4 && /^(?=.*\\d).{4,}$/.test(password)) {\r\n  console.log('losing');\r\n}\r\n```\r\n\r\n## Funciones\r\n\r\n### Escriba funciones pequeñas\r\n\r\nMantenga sus funciones cortas. \r\nUna buena función cabe en una diapositiva que las personas en la última fila de una sala grande pueden leer cómodamente. \r\nAún contando con que ellos no tengan una visión perfecta y debe limitarse a aproximadamente 15 líneas de código por función.\r\n\r\n### Retorne rápidamente las funciones\r\n\r\nPara evitar profundidad de anidamiento en las declaraciones if, devuelva el valor de una función tan pronto como sea posible.\r\n\r\n*Correcto:*\r\n\r\n```js\r\nfunction isPercentage(val) {\r\n  if (val < 0) {\r\n    return false;\r\n  }\r\n\r\n  if (val > 100) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n```\r\n\r\n*Incorrecto:*\r\n\r\n```js\r\nfunction isPercentage(val) {\r\n  if (val >= 0) {\r\n    if (val < 100) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n```\r\n\r\nO para este ejemplo particular, también puede estar bien para acortar las cosas aún mejor:\r\n\r\n```js\r\nfunction isPercentage(val) {\r\n  var isInRange = (val >= 0 && val <= 100);\r\n  return isInRange;\r\n}\r\n```\r\n\r\n### Nombre sus closures\r\n\r\nSiéntase libre de dar a sus closures un nombre. \r\nEsto demuestra que usted se preocupa por ellos, y producirá mejores seguimientos de stack, heap y esquemas de cpu.\r\n\r\n*Correcto:*\r\n\r\n```js\r\nreq.on('end', function onEnd() {\r\n  console.log('winning');\r\n});\r\n```\r\n\r\n*Incorrecto:*\r\n\r\n```js\r\nreq.on('end', function() {\r\n  console.log('losing');\r\n});\r\n```\r\n\r\n### No use closures anidados\r\n\r\nUtilice los closures, pero no los anide. \r\nDe lo contrario, el código se convertirá en un desastre.\r\n\r\n*Correcto:*\r\n\r\n```js\r\nsetTimeout(function() {\r\n  client.connect(afterConnect);\r\n}, 1000);\r\n\r\nfunction afterConnect() {\r\n  console.log('winning');\r\n}\r\n```\r\n\r\n*Incorrecto:*\r\n\r\n```js\r\nsetTimeout(function() {\r\n  client.connect(function() {\r\n    console.log('losing');\r\n  });\r\n}, 1000);\r\n```\r\n\r\n\r\n### Concatene los métodos claramente\r\n\r\nSi desea encadenar métodos se debe utilizar un método por línea.\r\nTambién debe sangrar estos métodos lo que hace más fácil denotar que son parte de la misma cadena.\r\n\r\n*Correcto:*\r\n\r\n```js\r\nUser\r\n  .findOne({ name: 'foo' })\r\n  .populate('bar')\r\n  .exec(function(err, user) {\r\n    return true;\r\n  });\r\n````\r\n\r\n*Incorrecto:*\r\n\r\n```js\r\nUser\r\n.findOne({ name: 'foo' })\r\n.populate('bar')\r\n.exec(function(err, user) {\r\n  return true;\r\n});\r\n\r\nUser.findOne({ name: 'foo' })\r\n  .populate('bar')\r\n  .exec(function(err, user) {\r\n    return true;\r\n  });\r\n\r\nUser.findOne({ name: 'foo' }).populate('bar')\r\n.exec(function(err, user) {\r\n  return true;\r\n});\r\n\r\nUser.findOne({ name: 'foo' }).populate('bar')\r\n  .exec(function(err, user) {\r\n    return true;\r\n  });\r\n````\r\n\r\n## Comentarios\r\n\r\n### Use diagonales para los comentarios\r\n\r\nUtilice diagonales tanto para una sola línea como para múltiples líneas de comentarios. \r\nTrate de escribir comentarios que expliquen los mecanismos de nivel superior o aclaren segmentos difíciles de su código. \r\nNo use los comentarios para replantear las cosas triviales.\r\n\r\n*Correcto:*\r\n\r\n```js\r\n// 'ID_SOMETHING=VALUE' -> ['ID_SOMETHING=VALUE', 'SOMETHING', 'VALUE']\r\nvar matches = item.match(/ID_([^\\n]+)=([^\\n]+)/));\r\n\r\n// This function has a nasty side effect where a failure to increment a\r\n// redis counter used for statistics will cause an exception. This needs\r\n// to be fixed in a later iteration.\r\nfunction loadUser(id, cb) {\r\n  // ...\r\n}\r\n\r\nvar isSessionValid = (session.expires < Date.now());\r\nif (isSessionValid) {\r\n  // ...\r\n}\r\n```\r\n\r\n*Incorrecto:*\r\n\r\n```js\r\n// Execute a regex\r\nvar matches = item.match(/ID_([^\\n]+)=([^\\n]+)/);\r\n\r\n// Usage: loadUser(5, function() { ... })\r\nfunction loadUser(id, cb) {\r\n  // ...\r\n}\r\n\r\n// Check if the session is valid\r\nvar isSessionValid = (session.expires < Date.now());\r\n// If the session is valid\r\nif (isSessionValid) {\r\n  // ...\r\n}\r\n```\r\n\r\n## Miscelanea\r\n\r\n### Object.freeze, Object.preventExtensions, Object.seal, with, eval\r\n\r\nMierdas locas que es probable que nunca necesite. \r\nManténgase alejado de ellas.\r\n\r\n### Requieres al principio\r\n\r\nPonga siempre los requieres en la parte superior del archivo para ilustrar claramente sus dependencias. Además de dar una visión general de los demás en un vistazo rápido de las dependencias y posible impacto de la memoria, que permite determinar si necesitan un archivo package.json si optan por utilizar el archivo en otro lugar.\r\n\r\n### Getters y setters\r\n\r\nNo utilice setters, causan más problemas para las personas que tratan de utilizar su software de los que pueden resolver.\r\n\r\nSiéntase libre de utilizar getters que están libres de los [efectos secundarios] [efecto secundario], al igual que proporcionar una propiedad length para una colección de clases.\r\n\r\n[efecto secundario]: http://en.wikipedia.org/wiki/Side_effect_(computer_science)\r\n\r\n### No extienda prototypes ya incorporados\r\n\r\nNo extienda el prototype de objetos nativos de JavaScript. \r\nSu yo del futuro estará por siempre agradecido.\r\n\r\n*Correcto:*\r\n\r\n```js\r\nvar a = [];\r\nif (!a.length) {\r\n  console.log('winning');\r\n}\r\n```\r\n\r\n*Incorrecto:*\r\n\r\n```js\r\nArray.prototype.empty = function() {\r\n  return !this.length;\r\n}\r\n\r\nvar a = [];\r\nif (a.empty()) {\r\n  console.log('losing');\r\n}\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}